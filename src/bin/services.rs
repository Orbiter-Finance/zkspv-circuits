use tokio::sync::mpsc;
use tokio::task;
use zkspv_circuits::arbitration::router::ProofRouter;
use zkspv_circuits::server::client::send_to_client;
use zkspv_circuits::server::execute::parse_original_proof;
use zkspv_circuits::server::{init_server, OriginalProof};

#[tokio::main]
async fn main() {
    let (tx, mut rx) = mpsc::unbounded_channel::<OriginalProof>();
    let receive_tasks = task::spawn(async move {
        init_server(tx).await.expect("init server error");
    });

    let execute_tasks = task::spawn(async move {
        while let original_proof = rx.recv().await {
            task::spawn_blocking(|| {
                let task_params = parse_original_proof(original_proof.clone().unwrap());
                let task = ProofRouter::new(task_params.unwrap(), 1);
                // let proof = task.get_calldata(true);
                 let proof = "00000000000000000000000000000000000000000031411fbd5bfb6d9cbb70560000000000000000000000000000000000000000008a626feadd91eec89e305f00000000000000000000000000000000000000000000143382f6c9d44a9895d60000000000000000000000000000000000000000000d6e75247ab48bd2b93f99000000000000000000000000000000000000000000af3374e5cbd8cbc564b59f0000000000000000000000000000000000000000000002096b182b009ac4d817000000000000000000000000000000000000000000da70fb913b309530324dc300000000000000000000000000000000000000000043529ab92e0be5db020b8b000000000000000000000000000000000000000000001b608c1af2d74de9961d0000000000000000000000000000000000000000005795d8ab4ffe9778af9d21000000000000000000000000000000000000000000b8cf445b3f2026e69115ea0000000000000000000000000000000000000000000005095258428b8e74a96500000000000000000000000000000000cb22718a3739fea9d5a3e3ff8e2c7f2900000000000000000000000000000000256c0ba21caac56dc950696e30ed06f500000000000000000000000000000000df92729bc172d5acb27bdda6537e6ffb000000000000000000000000000000003ec4f866628c6a88582a3386412aaf370000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000003b000000000000000000000000c3c7a782dda00a8e61cb9ba0ea8680bb3f3b9d10000000000000000000000000afcfbb382b28dae47b76224f24ee29be2c823648000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b1a2bc2ec507d500000000000000000000000000000000000000000000000000000000000001de000000000000000000000000000000000000000000000000000000006538db500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cb22718a3739fea9d5a3e3ff8e2c7f2900000000000000000000000000000000256c0ba21caac56dc950696e30ed06f50000000000000000000000000000000000000000000000000000000000977c480115ec72941d670909bba9bd12e45e462bffb725bcc05d75e3b1c22b728066e01df943b5729175c2387ac304a234ea45f9da01e9fc3a6ae29a7b2cf0a89d63cf19c8f0cac14e0161690dd760cb155ad939aff4853b2489e158ffdff35a4bcc3229882118b9559c8398043e869e43bef3e6f0ae74eb8576abd7749d0e5eb87b9a142ce409a259e4bd3f46a0c93821313a4f0bbf6635400fa1261d9dd56dd6a74b058aa1a82d76fd3f2c7a67dc35ade7713edd6cfd47d97cdc5c54744f470bbf2c0856ce6ee29b3b5c59cfec82d9d2e28569732868f3d3ac8528f0d3a13195599f1908540794058525e9ba39d264c59490edfc81f00b3cbf8a340276998f34b9180ab1268a8ade17812f202fb729f913e122733130057bb4693a12fe52429d69ec0a582e80bbcd3bb7bd6d3aaaa768300154073428a1863f3ed0b1e5560aa4da472223676982679fbc8c2063cbec90825f687eb3fbefb7f172f47185265ffcf5b70c4f5c050d9ceeb80cd816c6f20b552db30078989db95f90d07a3e52a8e7e84f0e65faa32959b052d7c2a2530f801d9ae893be1d39c003dfccaa6541d2103464150656b4f97e9761d3dc8d86cefe413351876acbc50409bafe167e0c1a4072960137cac0c3ba55add89e3a31a6f5232a99e787b51bd1575b30b6bf9c72fe33230b69900730190f077d5921317699d0ebad6239107106984dd809aea1be7386c60b212839ef1fde438ac1b2088af0066887d0bddc18bdb886de004eff8d800c052931effda899ca10b05469faef6cc12aab0cc0fbecefef22b9868014c4303b6120a1255619f89743cfc27c6600993c28fa0ba54dd5b699006527ff9e794047e604ba931041e2108be3e985e796238912ba71f3b5ff408a67fcdfa245a14b9414049e86f63ef79f05ba349b030c5edae5e6a39c02f6e7d5bd0193822d25d74da72a64a7c196b11cf1691ce6768dd478eb10dfaf79ee22ec359a9b7108250b6a40064f9ae52114a13e50d63dcde6c1de5a326ad306245df9ef1005760ed090eff7060393c31ec93b02dcf5dc6bea918c66dbd8030846506b1e11510a328e501e0802a28b931b8d674461690706b11f344524f8f9d5293d0883e1c94cf47014f1ab276d25eeeccf6a9e166375acd45b34d73502a8f0b6430799f0260348f02ae0940c0e5487084d87c8ff0604009946a1e1d268cda2cc8608bd2f458fa271838fcf2323e3b1c4da9dc0243fbfff9ac997aa84333f4f1f6059b80a18caaf0a296df63009275e766829986bcbeac4d1de2ef4e91e7d1b3a78f4959bd15cae4e05f92804a9cd1d93dbe37064aab61ed3a2b5ae2c5cfa5035c939dd751a6502decf1e9512a0bb7161b694dd93438cc3a7712b27d1b938b5a4c9ce13cc4f547a9f9b75482616f2f4eaae179036da94ff2d38abdb8c00ddca240c6f4c352b5d15ecb1f7c714e4deb9f25c24d70a2f8aa937cf32c92a4d61c09ed0d762b6717af95af58b3b14590eef4e271d9d68485136e509b60189e792f7bb8e16549d51bf03621f9a812ec9ec500e590592960dd5d97fbb145997aa5153b03a823c215993942c7e59790fe5f66f6797b144bb2df5b511ba1a15f73373e4ebf8da2e8ba600bf585abb660844e9ed8ffdfd55860fe82626ad82948a70eef9b4f37a99d53d238769333f8d1c7a03363d738bef52640cc40e58858248786106081c9be6a9031aec24e796c60641010ac0ae0bc497416e41ef7b37e8b264fcf09e9f95e6c426c2946d22275a12edd7e617d7acc7573d1cd804ed469265c0633d02add909bf620d2f85b38cc615fbd89d070a1e5a93646fab07de4f1b7acadb3729f429a07c9108d5f7609d7c03f86175687637d0d6649bb152bf88f906f10ccbbaaa0e55d174f2659d05b64828c22c5dfdf21fac548871eca2cdc5c77875907751083b49297630f95754cdc4".to_string();
                let result = tokio::runtime::Runtime::new().unwrap().block_on(async {
                    send_to_client(original_proof.unwrap().task_id, proof).await
                });

                match result {
                    Ok(_) => println!("send_to_client success"),
                    Err(err) => eprintln!("send_to_client error: {}", err),
                }
            })
            .await
            .unwrap();
        }
    });

    tokio::join!(receive_tasks, execute_tasks);
}
