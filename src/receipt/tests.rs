use std::env::set_var;

use ethers_core::types::{Bytes, H256};
use ethers_core::utils::hex::FromHex;

use crate::halo2_proofs::dev::MockProver;
use crate::receipt::util::{ReceiptConstructor, RECEIPT_PF_MAX_DEPTH};
use crate::receipt::EthBlockReceiptCircuit;
use crate::rlp::builder::RlcThreadBuilder;
use crate::util::helpers::get_provider;
use crate::util::EthConfigParams;
use crate::Network::{Arbitrum, Ethereum};
use crate::{ArbitrumNetwork, EthPreCircuit, EthereumNetwork, Network};

fn get_test_circuit(
    transaction_hash: H256,
    receipt_rlp: Vec<u8>,
    merkle_proof: Vec<Bytes>,
    network: Network,
) -> EthBlockReceiptCircuit {
    let provider = get_provider(&network);
    let constructor = ReceiptConstructor::new(
        transaction_hash,
        None,
        receipt_rlp,
        merkle_proof,
        RECEIPT_PF_MAX_DEPTH,
        network,
    );
    EthBlockReceiptCircuit::from_provider(&provider, constructor)
}

#[test]
pub fn test_receipt_mpt() -> Result<(), Box<dyn std::error::Error>> {
    let params = EthConfigParams::from_path("configs/tests/receipt.json");
    set_var("ETH_CONFIG_PARAMS", serde_json::to_string(&params).unwrap());
    let k = params.degree;
    let transaction_hash =
        "0x6167c0b969859713aa2145e6d6ab2fd5fecc4d7781fd37ed19a2feb310ad6853".parse().unwrap();
    let receipt_rlp = Vec::from_hex("02f9069901830e7083b9010000800000000000000000000000000000000000000000000009000002000000000000000000000020213000000020000000080200000000100800008000000001000040000000000060000000000800000000000204000000008000800800000000040008000000000200020000042000000020400420200008100400100000000000000000040401000020000100000000000000020000401c0400000000040000000000000000080600000800000040001000000010080000000000000000000300000000084001000000000001200a000100000000008000000000200020410000080000200000100000000000000000800000000000200000000000040208f9058ef89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b0a0407d8f1263c0d450f7b087bf9efa8ead9e255dede9eb5ca45a6b481d2b407166a0337c0c9341b820a06575f77e4a801be8fc8dfcec3714e4250b9a06f9f458b54d80f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b1a084b7574cc30c59d7690cef4bcf5862c082bb6d5f11f0515e4f9ca77a92080037a0bbe9d54ec352d17a6cdb4e9f33ed151d20787f9d3930e4c7d6c65ceb515092f180f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b2a0f5e79f5ede77c501db29e260bacaf547bcb59a4792515c1f6180066f69191292a07800c6eb717374387d3e9c4905a5fbd171cee7fa5802002fcc6f35d2c8d8987080f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b3a069cd421c4b4c43d3f467688757be6f3420d62fb57b765aa66cc34329a6d05524a03e24e5f17c0a8c46e815bdc3e8305882dca4d0ec7f572100584dd163da5357d880f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b4a0ec55748709203624129dc51b2ab0ba9ae422b594b14a700a38ca78ebb6a4b61ea0212f9e5e904e2f53a1efbd05875df0ee0326fffcc30809e2c6b658cde8e8c72480f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b5a0f711f7c20e70c374cc5ead4ae7dd88bc11aef5a5b05290658897273f2bd8b743a0084274f859495c770dc2a018dd1c5271e0f1ccd682416e972e1bf26020ac48e380f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b6a0f27a7c3771e9571a7d02cb1d52ea2f1ddb7987bb5adbcdebbf83d98c785aeafaa0214164f47a295c27367d2f26efbd6374a669fa3fcbfa0c59914d68baec15085880f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b7a018f4b2ca744fd0dfcaafc736b0e66245ee75b720dd1e2db9bdfcfa36728c8947a06487954945ba1d5819291b610fe8b108c0fad997daec840d27758984202ef41780f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b8a091d5cd57c2dd507e4cbd50fe22a03ce5bb9d6d54642226c091ccdb1b160293dca0e2231375f6738cd791394ce4f385e5ee94675ab4e7bc2c276e0fa47863bbc5a480").unwrap();

    let proof_one_bytes = Vec::from_hex("f8f1a03403e025a0f039f790a504329a58deca6aff97236f4ce566a697e3145be8cf45a0b4cd6389594e26022dc22208e14c5b72524aa7a2dfc96268b4a5779cea4a87a0a0eb33cab3d1c683e8d37f59355332ff37255e7b280b37a03ebbe1ddc3b8962d01a074c34940606ed2bd6f4220ac87cce111601e4f1c999d2cfdad42f9ecdcb35699a0222e2d53bcbb3999d35ed7034d6ba74e98246270b629ab6b182b8314e7713621a0818d82681dd6a1b580bf7f0aa0bfdb90becafd18918675e203a3ce19e07fe4d98080a021941c25975db12a30fd08d99fb428d09b181ddbd04c441ca79c76428e7560a38080808080808080").unwrap();
    let proof_one = Bytes::from(proof_one_bytes);

    let proof_two_bytes = Vec::from_hex("f901f180a0f6fb96088e82819a3e12cec5c98130e810cb0ac3855bfc5d0fbea58607b2e1e4a075110cce80b3717ee36c0de3a9369aeb95903283e466c2a6796eae631c98442ca01ac07126d4dd21a6874225344cbe0ed7655b5ca2e7713fc8b92f0718e7e8d91fa09a0c1f8b66a4f91de906efb7c0ae122ae00eb2172cabf476d775da145b3c282aa01308c16d4e4e241c4ea174d675fcf0c8c6d0814fafa5cd5f6ff78a6687b47c44a0208b56c86809e6041827c84bfc1def3c4adb32e6569ab9127154e23e47fc6949a00611db5eea25566e262cc9a6823e33c5d160aa422e3341849757fa6da52b3753a014d60d76c1072b8c075d4657e78c05530897229a182015ef548350204188f96ea0369c7f0792db70806c9706f1768e21a2edd86e34a3b981b2623d7dcef9839ccfa036c8e2995dded83ec7b783a5935028f16543f72a878de07fa4a54a2d2ec6644ca00a3667da65f5c9ec92e7693b75cf3edc9b67cab27659a4def31496ff42aca933a0d099666d5206448f136c09037fa2178c4a775198f4c9eb49e7c8ee78925f10d7a0ae4f06bb1bf05ef7da9a6e57f41bcc2fe70b82ef7043afe21d7729015e103c40a0b9cd5dc96c82266c79dde72c6779a152700eea00c654b3645a162fbce68771aaa0f0fe68cacd4db3e3d4de71e5d406e3c058c05969fcf21e43073a9fd13e5d469880").unwrap();
    let proof_two = Bytes::from(proof_two_bytes);

    let proof_three_bytes = Vec::from_hex("f906a120b9069d02f9069901830e7083b9010000800000000000000000000000000000000000000000000009000002000000000000000000000020213000000020000000080200000000100800008000000001000040000000000060000000000800000000000204000000008000800800000000040008000000000200020000042000000020400420200008100400100000000000000000040401000020000100000000000000020000401c0400000000040000000000000000080600000800000040001000000010080000000000000000000300000000084001000000000001200a000100000000008000000000200020410000080000200000100000000000000000800000000000200000000000040208f9058ef89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b0a0407d8f1263c0d450f7b087bf9efa8ead9e255dede9eb5ca45a6b481d2b407166a0337c0c9341b820a06575f77e4a801be8fc8dfcec3714e4250b9a06f9f458b54d80f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b1a084b7574cc30c59d7690cef4bcf5862c082bb6d5f11f0515e4f9ca77a92080037a0bbe9d54ec352d17a6cdb4e9f33ed151d20787f9d3930e4c7d6c65ceb515092f180f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b2a0f5e79f5ede77c501db29e260bacaf547bcb59a4792515c1f6180066f69191292a07800c6eb717374387d3e9c4905a5fbd171cee7fa5802002fcc6f35d2c8d8987080f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b3a069cd421c4b4c43d3f467688757be6f3420d62fb57b765aa66cc34329a6d05524a03e24e5f17c0a8c46e815bdc3e8305882dca4d0ec7f572100584dd163da5357d880f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b4a0ec55748709203624129dc51b2ab0ba9ae422b594b14a700a38ca78ebb6a4b61ea0212f9e5e904e2f53a1efbd05875df0ee0326fffcc30809e2c6b658cde8e8c72480f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b5a0f711f7c20e70c374cc5ead4ae7dd88bc11aef5a5b05290658897273f2bd8b743a0084274f859495c770dc2a018dd1c5271e0f1ccd682416e972e1bf26020ac48e380f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b6a0f27a7c3771e9571a7d02cb1d52ea2f1ddb7987bb5adbcdebbf83d98c785aeafaa0214164f47a295c27367d2f26efbd6374a669fa3fcbfa0c59914d68baec15085880f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b7a018f4b2ca744fd0dfcaafc736b0e66245ee75b720dd1e2db9bdfcfa36728c8947a06487954945ba1d5819291b610fe8b108c0fad997daec840d27758984202ef41780f89c941908e2bf4a88f91e4ef0dc72f02b8ea36bea2319f884a08f2916b2f2d78cc5890ead36c06c0f6d5d112c7e103589947e8e2f0d6eddb763a0000000000000000000000000000000000000000000000000000000000003a8b8a091d5cd57c2dd507e4cbd50fe22a03ce5bb9d6d54642226c091ccdb1b160293dca0e2231375f6738cd791394ce4f385e5ee94675ab4e7bc2c276e0fa47863bbc5a480").unwrap();
    let proof_three = Bytes::from(proof_three_bytes);

    let merkle_proof = vec![proof_one, proof_two, proof_three];
    let input = get_test_circuit(
        transaction_hash,
        receipt_rlp,
        merkle_proof,
        Ethereum(EthereumNetwork::Goerli),
    );
    let circuit = input.create_circuit(RlcThreadBuilder::mock(), None);
    MockProver::run(k, &circuit, vec![circuit.instance()]).unwrap().assert_satisfied();

    Ok(())
}
